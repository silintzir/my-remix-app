import type { ResumeValues } from "@/lib/types";
import { useEffect, useRef, useState } from "react";

import pdfMake from "pdfmake/build/pdfmake.js";
import pdfFonts from "pdfmake/build/vfs_fonts.js";
import { ResumeTemplate } from "@/lib/templates/chicago";

pdfMake.vfs = pdfFonts.pdfMake.vfs;

type Props = {
  values: ResumeValues;
  fullPage?: boolean;
};

const US_LETTER_RATIO = 1.2941;

export function PdfPaper({ values, fullPage = false }: Props) {
  const ref = useRef<HTMLEmbedElement>(null);

  useEffect(() => {
    const updateHeight = () => {
      const maxHeight = fullPage
        ? window.innerHeight
        : window.innerHeight - 114;
      const maxWidth = fullPage
        ? window.innerWidth - 40
        : window.innerWidth / 2 - 2 * 74;

      let width;
      let height;

      if (maxHeight / US_LETTER_RATIO > maxWidth) {
        width = maxWidth;
        height = width * US_LETTER_RATIO;
      } else {
        height = maxHeight;
        width = height / US_LETTER_RATIO;
      }

      if (ref.current) {
        ref.current.style.height = `${Math.floor(height)}px`;
        ref.current.style.width = `${Math.floor(width)}px`;
      }
    };
    updateHeight();
    window.addEventListener("resize", updateHeight);
    return () => {
      window.removeEventListener("resize", updateHeight);
    };
  }, [fullPage]);

  const [base64, setBase64] = useState("");

  useEffect(() => {
    const template = new ResumeTemplate(values);
    pdfMake
      .createPdf({
        header: {
          columns: [
            {
              text: new Date().toUTCString(),
              alignment: "left",
              fontSize: 8,
            },
            {
              text: "Generated by https://resumerunner.ai",
              alignment: "right",
              fontSize: 8,
            },
          ],
        },
        footer: (currentPage, pageCount) => ({
          text: `${currentPage.toString()} of ${pageCount.toString()}`,
          alignment: "center",
        }),
        pageSize: "LETTER",
        content: [
          {
            text: template.getFullName(),
            alignment: "center",
            style: "header",
            lineHeight: 1.2,
            bold: true,
            fontSize: 16,
          },
          {
            text: template.getContactInfo(),
            lineHeight: 1.2,
            alignment: "center",
          },
          {
            text: template.getAddress(),
            alignment: "center",
          },
          template.getHeaderWithLine(values.meta.steps.summary.title),
          {
            text: values.resume.summary.content,
          },
          template.getHeaderWithLine(values.meta.steps.work.title),
        ],
      })
      .getBase64((data) => {
        setBase64(`data:application/pdf;base64, ${data}#toolbar=0`);
      });
  }, [values]);

  return <embed type="application/json" width="100%" src={base64} ref={ref} />;
}
